// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package queries

import (
	"context"
	"github.com/upekZ/rest-api-go/internal/database/models"
	"github.com/upekZ/rest-api-go/internal/database/sqlc"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO "user" (
    first_name, last_name, email, phone, age, "status"
    )values (
        $1, $2, $3, $4, $5, $6)
`

type CreateUserParams struct {
	FirstName string
	LastName  string
	Email     string
	Phone     pgtype.Text
	Age    pgtype.Int4
	Status models.NullUserStatus
}

func (q *sqlc.Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.Exec(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Phone,
		arg.Age,
		arg.Status,
	)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM "user" 
WHERE userId = $1
`

func (q *sqlc.Queries) DeleteUser(ctx context.Context, userid pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, userid)
	return err
}

const getUser = `-- name: GetUser :one
SELECT userid, first_name, last_name, email, phone, age, status FROM "user" 
WHERE userId = $1 LIMIT 1
`

func (q *sqlc.Queries) GetUser(ctx context.Context, userid pgtype.UUID) (models.User, error) {
	row := q.db.QueryRow(ctx, getUser, userid)
	var i models.User
	err := row.Scan(
		&i.Userid,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.Age,
		&i.Status,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT userId, first_name, last_name, email, phone, age, "status" FROM "user"
ORDER BY first_name
`

func (q *sqlc.Queries) ListUsers(ctx context.Context) ([]models.User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []models.User
	for rows.Next() {
		var i models.User
		if err := rows.Scan(
			&i.Userid,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.Phone,
			&i.Age,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE "user" 
SET first_name = $1, last_name = $2, email = $3, phone = $4, age = $5, "status" = $6 
WHERE userId = $7
`

type UpdateUserParams struct {
	FirstName string
	LastName  string
	Email     string
	Phone     pgtype.Text
	Age    pgtype.Int4
	Status models.NullUserStatus
	Userid pgtype.UUID
}

func (q *sqlc.Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Phone,
		arg.Age,
		arg.Status,
		arg.Userid,
	)
	return err
}
